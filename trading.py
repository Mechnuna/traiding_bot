import os
import requests
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler
from dotenv import load_dotenv
import time
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv(dotenv_path="api.env")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
TG_CHAT_ID = os.getenv("TG_CHAT_ID")
RUGCHECK_API_URL = os.getenv("RUGCHECK_API_URL", "https://api.rugcheck.xyz/v1/tokens")
DEXSCREENER_API_URL = os.getenv("DEXSCREENER_API_URL", "https://api.dexscreener.com/token-boosts/top/v1")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram Bot
bot = Bot(token=TG_BOT_TOKEN)

def format_market_cap(mc):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ MarketCap –≤ –º–∏–ª–ª–∏–æ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1000k."""
    if mc >= 1000000:
        return f"{mc // 1000000}M"  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏–æ–Ω—ã
    elif mc >= 1000:
        return f"{mc // 1000}k"  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç—ã—Å—è—á–∏
    return str(mc)  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å

async def fetch_dexscreener_tokens(limit=20):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å Dexscreener API. –ë–µ—Ä–µ—Ç –Ω–µ –±–æ–ª–µ–µ `limit` —Ç–æ–∫–µ–Ω–æ–≤.
    """
    try:
        response = requests.get(DEXSCREENER_API_URL)
        response.raise_for_status()
        data = response.json()  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤

        tokens = []
        for token in data[:limit]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ `limit` —Ç–æ–∫–µ–Ω–æ–≤
            token_address = token.get('tokenAddress')
            if token_address:
                token_data = {
                    'tokenAddress': token_address,
                    'url': token.get('url', "N/A"),
                    'links': token.get('links', []),
                    'totalAmount': token.get('totalAmount', 0),
                    'priceChange5m': token.get('priceChange5m', "N/A"),
                    'priceChange1h': token.get('priceChange1h', "N/A"),
                }
                tokens.append(token_data)

        return tokens
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å Dexscreener: {e}")
        return []

async def check_tokens_with_rugcheck(tokens, max_retries=3, delay=15):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ RugCheck —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.
    """
    results = []
    for token in tokens:
        token_address = token.get("tokenAddress")

        if not token_address:
            print(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–æ–∫–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è tokenAddress: {token}")
            continue

        retries = 0
        while retries < max_retries:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ —Å RugCheck
                response = requests.get(f"{RUGCHECK_API_URL}/{token_address}/report/summary")
                response.raise_for_status()
                data = response.json()

                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                ticker = data.get("symbol")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
                risks = data.get("risks", [])
                if any(risk.get("level") == "danger" for risk in risks):
                    print(f"–¢–æ–∫–µ–Ω {token_address}: Danger üî¥")
                    results.append({"tokenAddress": token_address, "status": "Danger üî¥", "ticker": ticker})
                else:
                    print(f"–¢–æ–∫–µ–Ω {token_address}: Good üü¢")
                    results.append({"tokenAddress": token_address, "status": "Good üü¢", "ticker": ticker})

                break  # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤
            except requests.exceptions.HTTPError as e:
                if response.status_code == 429:  # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                    print(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address}, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    retries += 1
                    time.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ {token_address} —á–µ—Ä–µ–∑ RugCheck: {e}")
                    break
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ {token_address} —á–µ—Ä–µ–∑ RugCheck: {e}")
                break

    return results

async def send_telegram_report(update: Update, context):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å Dexscreener (–º–∞–∫—Å–∏–º—É–º 20)
    tokens = await fetch_dexscreener_tokens(limit=20)

    # –ü—Ä–æ–≥–æ–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ RugCheck
    analysis_results = await check_tokens_with_rugcheck(tokens)

    message = "–ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á:\n\n"

    for idx, token in enumerate(tokens, start=1):  # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        token_address = token.get("tokenAddress")
        url = token.get("url", "N/A")
        mc = format_market_cap(token.get("totalAmount", 0))  # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å MC
        rug_status = next(
            (result["status"] for result in analysis_results if result["tokenAddress"] == token_address),
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )
        ticker = next(
            (result["ticker"] for result in analysis_results if result["tokenAddress"] == token_address),
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        name = f"${ticker}"  # –¢–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∏–∫–µ—Ä
        price_change_5m = token.get("priceChange5m", "N/A")
        price_change_1h = token.get("priceChange1h", "N/A")

        message += (
            f"{idx}. {ticker} - token: {token_address}\n"
            f"URL: {url}\n"
            f"MC: {mc}\n"
            f"5M: {price_change_5m}%\n"
            f"1H: {price_change_1h}%\n"
            f"Rugcheck: {rug_status}\n\n"
        )

    try:
        await update.message.reply_text(message)
        print("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –≤ Telegram: {e}")

async def start(update: Update, context):
    """
    –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
    """
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    await send_telegram_report(update, context)

def main():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    """
    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(TG_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É "/start" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
    application.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
