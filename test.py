import requests
import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import snscrape.modules.twitter as sntwitter

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
DEXSCREENER_API_LATEST = "https://api.dexscreener.com/token-profiles/latest/v1"
DEXSCREENER_API_TOKENS = "https://api.dexscreener.com/latest/dex/tokens/"
DEXSCREENER_API_BOOSTS = "https://api.dexscreener.com/token-boosts/top/v1"
DEXSCREENER_API_LATEST_BOOSTS = "https://api.dexscreener.com/token-boosts/latest/v1"
RUGCHECK_API = "https://api.rugcheck.xyz/v1"
NETWORK = "Solana"
AGE_THRESHOLD_HOURS = 24
TXNS_1H_THRESHOLD = 50
TXNS_5M_THRESHOLD = 5
TELEGRAM_BOT_TOKEN = "7039309217:AAHC7sD40OyjrEBpyGTleLzpTLEqy-VoRP4"


# --- –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ ---

# 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å DexScreener
def fetch_tokens_from_dexscreener():
    print("–ó–∞–ø—Ä–æ—Å –∫ DexScreener API...")
    response = requests.get(DEXSCREENER_API_LATEST)
    if response.status_code == 200:
        data = response.json()
        print("–û—Ç–≤–µ—Ç –æ—Ç DexScreener:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

        tokens = []
        if isinstance(data, list):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            for pair in data:
                # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏
                chain = pair.get('chain', None)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º 'chain'
                volume = pair.get('volume', {})
                pair_created_at = pair.get('pairCreatedAt', None)

                if (
                        chain == NETWORK and  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chain —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        volume.get('h1', {}).get('count', 0) >= TXNS_1H_THRESHOLD and
                        volume.get('m5', {}).get('count', 0) >= TXNS_5M_THRESHOLD and
                        pair_created_at and
                        (datetime.datetime.utcnow() - datetime.datetime.fromisoformat(
                            pair_created_at)).total_seconds() / 3600 <= AGE_THRESHOLD_HOURS
                ):
                    tokens.append({
                        "contract": pair.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        "symbol": pair.get('baseToken', {}).get('symbol', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        "social_links": pair.get('socials', {}),
                    })
        else:
            print("–û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.")

        return tokens
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DexScreener: {response.status_code}")
        return []

# 2. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–æ–∫–µ–Ω–∞–º
def fetch_token_data_by_address(address):
    url = f"{DEXSCREENER_API_TOKENS}{address}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É {address}: {response.status_code}")
        return {}


# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Rugcheck
def check_contract_with_rugcheck(contract_address):
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract_address} —á–µ—Ä–µ–∑ Rugcheck...")
    response = requests.get(f"{RUGCHECK_API}/{contract_address}")
    if response.status_code == 200:
        data = response.json()
        print("–û—Ç–≤–µ—Ç –æ—Ç Rugcheck:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return data.get('status', '') == 'good' and not data.get('topHolders', {}).get('isMajorityOwned', True)
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Rugcheck –¥–ª—è {contract_address}: {response.status_code}")
    return False


# 4. –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ TweetScout
def evaluate_social_audience(social_links):
    twitter_url = social_links.get('twitter')
    if not twitter_url:
        return {"influencers": 0, "degenerates": 0, "top_followers": 0}

    handle = twitter_url.split("/")[-1]
    print(f"–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ Twitter: {handle}")
    response = requests.get(f"{TWEETSCOUT_API}account/{handle}/quality")
    if response.status_code == 200:
        data = response.json()
        print("–û—Ç–≤–µ—Ç –æ—Ç TweetScout:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        influencers = data['influencers']
        degenerates = data['degenerates']
        top_followers = len([f for f in data['followers'] if f['followerCount'] >= 45000])
        return {"influencers": influencers, "degenerates": degenerates, "top_followers": top_followers}
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TweetScout –¥–ª—è {handle}: {response.status_code}")
    return {"influencers": 0, "degenerates": 0, "top_followers": 0}


# 5. –ê–Ω–∞–ª–∏–∑ Twitter —Ö–∞–π–ø–∞
def analyze_twitter_hype(symbol):
    print(f"–ê–Ω–∞–ª–∏–∑ —Ö–∞–π–ø–∞ –¥–ª—è {symbol} –≤ Twitter...")
    tweets = []
    for i, tweet in enumerate(sntwitter.TwitterSearchScraper(f"{symbol}").get_items()):
        if i >= 5:
            break
        tweets.append(f"üîπ @{tweet.user.username}: {tweet.content}")
    return "\n".join(tweets)


# --- Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å DexScreener
    tokens = fetch_tokens_from_dexscreener()
    results = []

    for token in tokens:
        contract = token["contract"]
        symbol = token["symbol"]
        social_links = token["social_links"]

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á–µ—Ä–µ–∑ Rugcheck
        is_good_contract = check_contract_with_rugcheck(contract)

        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ TweetScout
        social_quality = evaluate_social_audience(social_links)

        # 4. –ê–Ω–∞–ª–∏–∑ —Ö–∞–π–ø–∞ –≤ Twitter
        twitter_hype = analyze_twitter_hype(symbol)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if is_good_contract:
            results.append(
                f"üîπ {symbol} ({contract}):\n"
                f"üìä –ê—É–¥–∏—Ç–æ—Ä–∏—è: –ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã: {social_quality['influencers']}, "
                f"–î–µ–≥–µ–Ω–µ—Ä–∞—Ç—ã: {social_quality['degenerates']}, "
                f"–¢–æ–ø —Ñ–æ–ª–ª–æ–≤–µ—Ä—ã: {social_quality['top_followers']}\n"
                f"üê¶ –•–∞–π–ø –≤ Twitter:\n{twitter_hype}\n"
                f"üìú –°—Å—ã–ª–∫–∏: {social_links}\n"
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if results:
        await update.message.reply_text("\n\n".join(results))
    else:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")


if __name__ == "__main__":
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.run_polling()